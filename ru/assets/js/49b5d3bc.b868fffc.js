"use strict";(self.webpackChunkyunohost_docs=self.webpackChunkyunohost_docs||[]).push([[7401],{3905:(e,a,n)=>{n.d(a,{Zo:()=>v,kt:()=>d});var r=n(67294);function t(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function o(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);a&&(r=r.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?o(Object(n),!0).forEach((function(a){t(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function s(e,a){if(null==e)return{};var n,r,t=function(e,a){if(null==e)return{};var n,r,t={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||(t[n]=e[n]);return t}(e,a);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var l=r.createContext({}),c=function(e){var a=r.useContext(l),n=a;return e&&(n="function"==typeof e?e(a):i(i({},a),e)),n},v=function(e){var a=c(e.components);return r.createElement(l.Provider,{value:a},e.children)},h="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return r.createElement(r.Fragment,{},a)}},p=r.forwardRef((function(e,a){var n=e.components,t=e.mdxType,o=e.originalType,l=e.parentName,v=s(e,["components","mdxType","originalType","parentName"]),h=c(n),p=t,d=h["".concat(l,".").concat(p)]||h[p]||u[p]||o;return n?r.createElement(d,i(i({ref:a},v),{},{components:n})):r.createElement(d,i({ref:a},v))}));function d(e,a){var n=arguments,t=a&&a.mdxType;if("string"==typeof e||t){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var l in a)hasOwnProperty.call(a,l)&&(s[l]=a[l]);s.originalType=e,s[h]="string"==typeof e?e:t,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},78969:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(87462),t=(n(67294),n(3905));const o={title:"General scope of variables",template:"docs",taxonomy:{category:"docs"},routes:{default:"/shell_variables_scope"}},i=void 0,s={unversionedId:"contribute/packaging_apps/resources/shell_variables_scope",id:"contribute/packaging_apps/resources/shell_variables_scope",title:"General scope of variables",description:"Variables exists for the current shell and its children only.",source:"@site/docs/06.contribute/10.packaging_apps/80.resources/20.shell_variables_scope.md",sourceDirName:"06.contribute/10.packaging_apps/80.resources",slug:"/contribute/packaging_apps/resources/shell_variables_scope",permalink:"/yunodocusaurus/ru/docs/contribute/packaging_apps/resources/shell_variables_scope",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/06.contribute/10.packaging_apps/80.resources/20.shell_variables_scope.md",tags:[],version:"current",sidebarPosition:20,frontMatter:{title:"General scope of variables",template:"docs",taxonomy:{category:"docs"},routes:{default:"/shell_variables_scope"}},sidebar:"tutorialSidebar",previous:{title:"App resources",permalink:"/yunodocusaurus/ru/docs/contribute/packaging_apps/resources/packaging_apps_resources"},next:{title:"Contributing to the YunoHost core",permalink:"/yunodocusaurus/ru/docs/contribute/dev/"}},l={},c=[{value:"Functions inside a script",id:"functions-inside-a-script",level:3},{value:"The usage of locales variables",id:"the-usage-of-locales-variables",level:3},{value:"Conclusion",id:"conclusion",level:3}],v={toc:c},h="wrapper";function u(e){let{components:a,...n}=e;return(0,t.kt)(h,(0,r.Z)({},v,n,{components:a,mdxType:"MDXLayout"}),(0,t.kt)("p",null,"Variables exists for the current shell and its children only.",(0,t.kt)("br",{parentName:"p"}),"\n","Another script executed from the script is not a child, it's another shell which herited only the environment variables from its caller script, not its globals or locals variables."),(0,t.kt)("p",null,"When a script is called, it isn't started in the current shell, but in a new instance of bash which herite environment variables from its parent."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'var1=value1\nexport var2=value2\n\necho "$var1"\necho "$var2"\n# var1 and var2 exist\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Here, var1 doesn\'t exist, only var2 still exists.\n# Because it\'s an environment variable.\n')),(0,t.kt)("p",null,"In your current shell, where you launch this script, try"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},"echo $var1 - $var2\n")),(0,t.kt)("p",null,"None of this 2 variables exists, because their scope is limited to the script itself. Never its parent."),(0,t.kt)("h3",{id:"functions-inside-a-script"},"Functions inside a script"),(0,t.kt)("p",null,"Use a function would not change the scope of variables."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'var1=value1\nexport var2=value2\n\nset_variable () {\n    var3=value3\n    export var4=value4\n\n    echo "$var1"\n    echo "$var2"\n    echo "$var3"\n    echo "$var4"\n    # All variables exists here\n    # Because the function inherite its variables from the script.\n}\n\nset_variable\n\necho "$var1"\necho "$var2"\necho "$var3"\necho "$var4"\n# var1 var2, var3 and var4 exist\n# var3 exist because the function is executed in the same shell than the script itself.\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"\necho \\"\\$var3\\"\necho \\"\\$var4\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Here, var1 and var3 don\'t exist, only var2 and var4 still exist.\n# Because they\'re environment variables.\n')),(0,t.kt)("h3",{id:"the-usage-of-locales-variables"},"The usage of locales variables"),(0,t.kt)("p",null,"Locales variables are limited to the function and its children."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'var1=value1\nexport var2=value2\n\nset_variable () {\n    var3=value3\n    export var4=value4\n    local var5=value5\n\n    echo "$var1"\n    echo "$var2"\n    echo "$var3"\n    echo "$var4"\n    echo "$var5"\n    # All variables exists here\n    # Because the function inherite its variables from the script.\n}\n\nset_variable\n\necho "-"\n\necho "$var1"\necho "$var2"\necho "$var3"\necho "$var4"\necho "$var5"\n# var1 var2, var3 and var4 exist\n# var3 exist because the function is executed in the same shell than the script itself.\n# var5 doesn\'t exist, because its scope is limited to the function which declare it.\n\necho "-"\n\necho "\necho \\"\\$var1\\"\necho \\"\\$var2\\"\necho \\"\\$var3\\"\necho \\"\\$var4\\"\necho \\"\\$var5\\"" > other_script.sh\nchmod +x other_script.sh\n./other_script.sh\n# Here, var1, var3 and var5 don\'t exist, only var2 and var4 still exist.\n# Because they\'re environment variables.\n')),(0,t.kt)("p",null,"Using a local variable is usefull for limit it scope to the function only. And not bother the script in its globality with useless variables.",(0,t.kt)("br",{parentName:"p"}),"\n","But there's also another advantage with local variable, do not modify the content of a global variable."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'var1=value1\nvar2=value2\nvar3=value3\n\nset_variable () {\n    echo "$var1"\n    echo "$var2"\n    echo "$var3"\n\n    echo "-"\n\n    var2=new_value2\n    local var3=new_value3\n\n    echo "$var1"\n    echo "$var2"\n    echo "$var3"\n    # Values of var2 and var3 are modified in the function.\n}\n\nset_variable\n\necho "-"\n\necho "$var1"\necho "$var2"\necho "$var3"\n# var3 retake is original value,\n# because in the function, var3 was declared as a new locale variable.\n# But var2 was directly modified, so its value still changed.\n# Because, var2 in the function is still a global variable.\n')),(0,t.kt)("p",null,"As seen previously, modified or created variables in a function can affect the main script because the function is executed in the same shell.",(0,t.kt)("br",{parentName:"p"}),"\n","But, the things are different if the function is executed in a sub shell, the function become a child which only inherite from its parent."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-bash"},'var1=value1\nvar2=value2\nvar3=value3\n\nfonction2 () {\n    echo "-"\n    echo "var1=$var1"\n    echo "var2=$var2"\n    echo "var3=$var3"\n    echo "var4=$var4"\n    echo "var5=$var5"\n    # Even var3, which is local, is inherited from the parent function.\n}\n\nset_variable () {\n    echo "var1=$var1"\n    echo "var2=$var2"\n    echo "var3=$var3"\n    # Variables are inherited from the parent.\n\n    echo "-"\n\n    var2=new_value2\n    local var3=new_value3\n    var4=new_value4\n    export var5=new_value5\n\n    echo "var1=$var1"\n    echo "var2=$var2"\n    echo "var3=$var3"\n    echo "var4=$var4"\n    echo "var5=$var5"\n    # Values of var2 and var3 are modified in the function.\n\n    (fonction2)\n}\n\n(set_variable)\n# Start the function in a sub shell.\n\necho "-"\n\necho "var1=$var1"\necho "var2=$var2"\necho "var3=$var3"\necho "var4=$var4"\necho "var5=$var5"\n# var2 and var3 retake their original values.\n# Because the function is in a child shell which never affect its parent.\n# Likewise, var4 and var5 don\'t exist, because they\'re been declared in child shell.\n# The parent never inherite from its children shell.\n')),(0,t.kt)("h3",{id:"conclusion"},"Conclusion"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"The scope of a variable is always the current shell and its children, never its parent shell."),(0,t.kt)("li",{parentName:"ul"},"An environment variable may be exported to a new shell, detached from the first one. If the last one executed the second one. But, it can't affect the parents."),(0,t.kt)("li",{parentName:"ul"},"A locale variable in a function, executed in the current shell, can't affect the environment outside of the function. End allow also to not affect a global variable with the same name."),(0,t.kt)("li",{parentName:"ul"},"A function executed in a sub shell will never affect its parent, with global or local variables."),(0,t.kt)("li",{parentName:"ul"},"A parent can NEVER be affected by variables defined or modified in its children shell.")))}u.isMDXComponent=!0}}]);